{"version":3,"sources":["logo.svg","AppRoutes.ts","services/theme-context.tsx","components/ThemeTogglerButton/ThemeTogglerButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","routes","name","to","selected","themes","light","label","isLightTheme","dark","ThemeContext","createContext","theme","toggleTheme","ThemeTogglerButton","Consumer","FormControlLabel","className","control","Switch","checked","onChange","color","Counter","lazy","Clock","Form","App","currentLink","window","location","pathname","useState","navLinks","setNavLinks","themeContextValue","setThemeContextValue","Provider","value","src","logo","alt","map","link","i","key","onClick","index","forEach","fallback","path","component","exact","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,0NCA9BC,G,MAAS,CAClB,CACIC,KAAM,QACNC,GAAI,IACJC,UAAU,GAEd,CACIF,KAAM,UACNC,GAAI,WACJC,UAAU,GAEd,CACIF,KAAM,WACNC,GAAI,YACJC,UAAU,KCZLC,EAAS,CACpBC,MAAO,CACLC,MAAO,QACPC,cAAc,GAEhBC,KAAM,CACJF,MAAO,OACPC,cAAc,IAILE,EAAeC,wBAAc,CACxCC,MAAOP,EAAOI,KACdI,YAAa,e,gBCKAC,EAfsB,WAGnC,OACE,kBAACJ,EAAaK,SAAd,MACG,gBAAEH,EAAF,EAAEA,MAAOC,EAAT,EAASA,YAAT,OACC,kBAACG,EAAA,EAAD,CAAkBC,UAAU,mBACxBC,QAAS,kBAACC,EAAA,EAAD,CAAQC,SAAUR,EAAMJ,aAAca,SAAUR,EAAaS,MAAM,YAC5Ef,MAAM,mB,8NCLlB,IAAMgB,EAAUC,gBAAK,kBAAM,iCACrBC,EAAQD,gBAAK,kBAAM,iCACnBE,EAAOF,gBAAK,kBAAM,uDAwETG,EAtEO,WACpB,IAAMC,EAAcC,OAAOC,SAASC,SADV,EAEMC,mBAAS/B,GAFf,mBAEnBgC,EAFmB,KAETC,EAFS,OAGwBF,mBAAS,CACzDpB,MAAOP,EAAOC,MACdO,YAGF,SAASA,IACPsB,EAAkBvB,MAChBuB,EAAkBvB,QAAUP,EAAOI,KAAOJ,EAAOC,MAAQD,EAAOI,KAClE0B,EAAkBtB,YAAcA,EAChCuB,E,yVAAqB,CAAD,GAAMD,OAZF,mBAGnBA,EAHmB,KAGAC,EAHA,KA0B1B,OACE,kBAAC1B,EAAa2B,SAAd,CAAuBC,MAAOH,GAC5B,yBAAKlB,UAAS,cAASkB,EAAkBvB,MAAML,QAC7C,4BAAQU,UAAU,cAChB,yBAAKA,UAAU,gBACb,kBAAC,EAAD,OAEF,yBAAKsB,IAAKC,IAAMvB,UAAU,WAAWwB,IAAI,SACzC,6CAGF,kBAAC,IAAD,KACE,wBAAIxB,UAAU,OACXgB,EAASS,KAAI,SAACC,EAAMC,GAAP,OACZ,wBAAIC,IAAKD,GACP,kBAAC,IAAD,CACE3B,UACE0B,EAAKvC,UAAYuC,EAAKxC,KAAOyB,EACzB,uBACA,cAENzB,GAAIwC,EAAKxC,GACT2C,QAAS,kBAjCMC,EAiCsBH,EAhCnDX,EAASe,SAAQ,SAACL,EAAMC,GAEpBD,EAAKvC,SADHwC,IAAMG,UAOZb,EAAY,YAAID,IATlB,IAA+Bc,IAmCdJ,EAAKzC,WAKd,yBAAKe,UAAU,eACb,kBAAC,WAAD,CAAUgC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW1B,EAAO2B,OAAK,IACvC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAW5B,IAClC,kBAAC,IAAD,CAAO2B,KAAK,YAAYC,UAAWzB,WC5D/B2B,QACW,cAA7BxB,OAAOC,SAASwB,UAEe,UAA7BzB,OAAOC,SAASwB,UAEhBzB,OAAOC,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9b7b9aa7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","export const routes = [\r\n    {\r\n        name: 'Clock',\r\n        to: '/',\r\n        selected: false\r\n    },\r\n    {\r\n        name: 'Counter',\r\n        to: '/counter',\r\n        selected: false\r\n    },\r\n    {\r\n        name: 'Comments',\r\n        to: '/comments',\r\n        selected: false\r\n    }\r\n];\r\n","import { createContext } from \"react\";\r\n\r\nexport const themes = {\r\n  light: {\r\n    label: \"light\",\r\n    isLightTheme: true,\r\n  },\r\n  dark: {\r\n    label: \"dark\",\r\n    isLightTheme: false,\r\n  },\r\n};\r\n\r\nexport const ThemeContext = createContext({\r\n  theme: themes.dark,\r\n  toggleTheme: () => {},\r\n});\r\n","import React from 'react';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { ThemeContext } from \"../../services/theme-context\";\r\n\r\nconst ThemeTogglerButton: React.FC = () => {\r\n  // The Theme Toggler Button receives not only the theme\r\n  // but also a toggleTheme function from the context\r\n  return (\r\n    <ThemeContext.Consumer>\r\n      {({theme, toggleTheme}) => (\r\n        <FormControlLabel className=\"theme-toggle-btn\"\r\n            control={<Switch checked={!theme.isLightTheme} onChange={toggleTheme} color=\"primary\" />}\r\n            label=\"Dark Theme\"\r\n        />\r\n      )}\r\n    </ThemeContext.Consumer>\r\n  );\r\n}\r\n\r\nexport default ThemeTogglerButton;","import React, { lazy, Suspense, useState } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.scss\";\r\nimport { routes } from \"./AppRoutes\";\r\nimport { ThemeContext, themes } from \"./services/theme-context\";\r\nimport ThemeTogglerButton from \"./components/ThemeTogglerButton/ThemeTogglerButton\";\r\n\r\nconst Counter = lazy(() => import(\"./components/Counter/Counter\"));\r\nconst Clock = lazy(() => import(\"./components/Clock/Clock\"));\r\nconst Form = lazy(() => import(\"./components/Form/Form\"));\r\n\r\nconst App: React.FC = () => {\r\n  const currentLink = window.location.pathname;\r\n  const [navLinks, setNavLinks] = useState(routes);\r\n  const [themeContextValue, setThemeContextValue] = useState({\r\n    theme: themes.light,\r\n    toggleTheme: toggleTheme,\r\n  });\r\n\r\n  function toggleTheme() {\r\n    themeContextValue.theme =\r\n      themeContextValue.theme === themes.dark ? themes.light : themes.dark;\r\n    themeContextValue.toggleTheme = toggleTheme;\r\n    setThemeContextValue({ ...themeContextValue });\r\n  }\r\n\r\n  function highlightSelectedLink(index: number) {\r\n    navLinks.forEach((link, i) => {\r\n      if (i === index) {\r\n        link.selected = true;\r\n      } else {\r\n        link.selected = false;\r\n      }\r\n    });\r\n\r\n    setNavLinks([...navLinks]);\r\n  }\r\n  return (\r\n    <ThemeContext.Provider value={themeContextValue}>\r\n      <div className={`App ${themeContextValue.theme.label}`}>\r\n        <header className=\"App-header\">\r\n          <div className=\"theme-toggle\">\r\n            <ThemeTogglerButton />\r\n          </div>\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h4>React js App</h4>\r\n        </header>\r\n\r\n        <Router>\r\n          <ul className=\"nav\">\r\n            {navLinks.map((link, i) => (\r\n              <li key={i}>\r\n                <Link\r\n                  className={\r\n                    link.selected || link.to === currentLink\r\n                      ? \"router-link selected\"\r\n                      : \"router-link\"\r\n                  }\r\n                  to={link.to}\r\n                  onClick={() => highlightSelectedLink(i)}\r\n                >\r\n                  {link.name}\r\n                </Link>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <div className=\"App-Content\">\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Switch>\r\n                <Route path=\"/\" component={Clock} exact />\r\n                <Route path=\"/counter\" component={Counter} />\r\n                <Route path=\"/comments\" component={Form} />\r\n              </Switch>\r\n            </Suspense>\r\n          </div>\r\n        </Router>\r\n      </div>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}